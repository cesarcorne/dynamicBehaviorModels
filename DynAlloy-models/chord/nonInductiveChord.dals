/*
Non-Inductive model of Chord protocol 
with composition of the system as SPIN model and validIsInvariant property
*/
one sig Network { base: set Node } { # base = 3 } // nodes in ring (may be nodes outside)

abstract sig Status {}

one sig Ready,  Joining, Rectifying extends Status{}

abstract sig Node {
   nextNode: lone Node,
   lt: set Node,
   newSucc: lone Node,
   pc: Status
}

one sig N0, N1, N2, N3, N4, N5 extends Node { } // extend as necessary

fact nodeOrdering {
   nextNode = N0 -> N1 + N1 -> N2 + N2 -> N3 + N3 -> N4 + N4 -> N5 
   lt = ^nextNode
}

pred Member [n: Node, succ: Node -> lone Node] {  some n.succ  }
pred NonMember [n: Node, succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node] {  
   no n.succ && no n.prdc && no n.succ2 
}

/*
memberOrNon has to be an assumption in precondition of asserts to work correctly 
or initialize with a Valid Network configuration
*/
pred isBestSucc[succ: Node -> lone Node, succ2: Node -> lone Node, bs: Node -> lone Node] {
all n: Node |
   (Member[n.succ, succ] && Member[n.succ2, succ] => (n -> n.succ) in bs)
   && (Member[n.succ, succ] && !Member[n.succ2,succ] => (n -> n.succ) in bs)
   && (!Member[n.succ, succ] && Member[n.succ2, succ] => (n -> n.succ2) in bs)
   && (!Member[n.succ, succ] && !Member[n.succ2, succ] => no n.bs)
}

action bestSucc[succ: Node -> lone Node, succ2: Node -> lone Node, bs: Node -> lone Node]{
   pre{}
   post{isBestSucc[succ,succ2,bs']}
}

pred memberOrNon[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node]{
   all n: Node | Member[n, succ] || NonMember[n, succ, succ2, prdc]
}

pred Between [n1, n2, n3: Node] {
   n3 in n1.lt =>   (n2 in n1.lt  && n3 in n2.lt )
             else ( n2 in n1.lt || n3 in n2.lt  )  }

pred Valid [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node] { 
   isBestSucc[succ, succ2, bs]
   && OneOrderedRing [bs] 
   && ConnectedAppendages [succ, bs] 
   && FullSuccessorList [succ, succ2]
   && BaseNotSkipped [succ, succ2]
}

pred OneOrderedRing [bs: Node -> lone Node] {
   let ringMembers = { n: Node | n in n.^bs } |
      Network.base in ringMembers      -- at least one ring containing base
   && (all disj n1, n2: ringMembers | n1 in n2.^(bs) ) 
                                                        -- at most one ring
   && (all disj n1, n2, n3: ringMembers |         
         n2 = n1.bs => ! Between[n1,n3,n2]          -- ordered ring
      )
}

pred ConnectedAppendages [succ: Node -> lone Node, bs: Node -> lone Node] {
   let members = { n: Node | Member[n, succ] } |
   let ringMembers = { n: members | n in n.^bs } |
      all na: members - ringMembers |                    
         some nc: ringMembers | nc in na.^bs                                                             
}

pred FullSuccessorList [succ : Node -> lone Node, succ2: Node -> lone Node]{
   all n : Node | Member[n,succ] => some n.succ2
}

pred BaseNotSkipped[succ: Node -> lone Node, succ2: Node -> lone Node]{
   all n: Node | 
      Member[n,succ] => 
      { no b: Network.base |
            (Between[n, b, n.succ] && b !in (n + n.succ))
        no b: Network.base |
            (Between[n.succ, b, n.succ2] && b !in (n.succ + n.succ2))
      }
}

pred StructuredSuccessorList [succ : Node -> lone Node, succ2 : Node -> lone Node]{
   all n : Node | Member[n,succ] => {
      Between[n,n.succ,n.succ2]
      n != n.succ2
   }
}

assert ValidImpliesStructuredSuccessorList {
   all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |
   Valid[succ, succ2, prdc, bs] => StructuredSuccessorList[succ, succ2]
}

--check ValidImpliesStructuredSuccessorList for 8 

pred HasBestSuccessors [succ : Node -> lone Node, bs: Node -> lone Node] {
   all n: Node | Member[n,succ]  => some n.bs  }

assert ValidImpliesHasBestSuccessors {
   all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |
   Valid[succ, succ2, prdc, bs] => HasBestSuccessors[succ, bs]
}

--check ValidImpliesHasBestSuccessors for 6 -- OK

/* ========================================================================
CORRECTNESS PROPERTIES
======================================================================== */

pred ConsistentPredecessors [succ: Node -> lone Node, prdc: Node -> lone Node] {
   let members = { n: Node | Member[n,succ] } |
      all n1, n2: members | n2 = n1.succ <=> n1 = n2.prdc
}

pred Reconciled [succ: Node -> lone Node, succ2: Node -> lone Node] { 
   let members = { n: Node | Member[n,succ] } |
   all n: members | 
         Member[n.succ,succ] 
      && Member[n.succ2,succ]
      && n.succ2 = (n.succ).succ
}

pred Ideal [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node] {  
   Valid[succ, succ2, prdc, bs] && ConsistentPredecessors[succ, prdc] && Reconciled[succ, succ2] 
} 

pred AllInRing [succ: Node -> lone Node] { 
   let members = { n: Node | some n.succ } |
      all n1, n2: members | n2 in n1.^(succ)
}

assert IdealImpliesAllInRing { 
   all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |
   Ideal[succ,succ2,prdc,bs] => AllInRing[succ] 
}

--check IdealImpliesAllInRing for 8

pred Succ2Correctness [succ: Node -> lone Node, succ2: Node -> lone Node, bs: Node -> lone Node] { 
   let members = { n: Node | Member[n,succ] } |
   all n: members |
      (Member[n.succ2,succ] && n.succ2 != n.bs) => n.succ2 = (n.bs).bs
}

assert IdealImpliesSucc2Correct { 
   all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |
   Ideal[succ, succ2, prdc, bs] => Succ2Correctness[succ, succ2, bs] 
}

--check IdealImpliesSucc2Correct for 8 

//Events

act Fail[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node] {
	pre{
		(Member[n,succ]) and 
		(n !in Network.base) and 
		(all m: Node | m.succ = n => (no m.succ2 || (m.succ2 != n && Member[m.succ2, succ]))) and
		(all m: Node | m.succ2 = n => Member[m.succ, succ])
	}
	post{
		succ' = succ - (n -> Node) and 
		succ2' = succ2 - (n -> Node) and 
		prdc' = prdc - (n -> Node)
	}
}

program JoinLookupEvent[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node] var [oldMember: Node]{
    [NonMember[n, succ, succ2, prdc]]?;
    [Member[oldMember, succ] && Between[oldMember, n, oldMember.succ]]?;

    n.newSucc := oldMember.succ
}

act JoinEvent[succ: Node -> lone Node,
		    succ2: Node -> lone Node,
			prdc: Node -> lone Node,
			n: Node,
			]
{
pre{NonMember[n,succ,succ2,prdc] and
	Member[n.newSucc, succ] and
	no b: Network.base | Between[n, b, n.newSucc]}
post{
	succ' = succ ++ (n -> n.newSucc) and
	succ2' = succ2 ++ (n -> n.newSucc.succ)
	}
}

program StabilizeFromOldSuccessorEvent[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node] var [preSucc: lone Node]{
   [Member[n,succ]]?;
   [n.newSucc = n.succ.prdc or n.newSucc = n.succ2.prdc]?;
   if (Member[n.succ, succ]) {
      succ2 := succ2 ++ (n -> n.succ.succ)
   }else{
      preSucc := n.succ2.succ;
      succ :=  succ ++ (n -> n.succ2);
      succ2 := succ2 ++ (n -> preSucc)
   }
}

act StabilizeFromNewSuccessorEvent [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node]{
	pre{
		Member[n,succ]	and 
		Member[n.newSucc,succ] and
		Between[n,n.newSucc,n.succ]
	}
	post{
		(succ' = succ ++ (n -> n.newSucc) and 
		succ2' = succ2 ++ (n -> n.newSucc.succ))
	}
}

act RectifyEvent [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node, newPrdc: Node]{
	pre{
		Member[n,succ] and
		(no n.prdc || NonMember[n.prdc, succ, succ2, prdc] || Between[n.prdc, newPrdc, n])
	}
	post{
		prdc' = prdc ++ (n -> newPrdc)
	}
}

////////////

program IsFail[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node]{
   [Valid[succ,succ2,prdc,bs]]?;
   Fail[succ, succ2, prdc, n]
}

--run IsFail for 6


program IsJoinLookupAndJoin[succ : Node -> lone Node, 
                  succ2: Node -> lone Node,
                  prdc: Node -> lone Node,
                  bs: Node -> lone Node,
                  n: Node]{
([Valid[succ, succ2, prdc, bs]]?;
call JoinLookupEvent[succ, succ2, prdc, n];
JoinEvent[succ, succ2, prdc, n];
[lookup = newSucc]?)
}

--run IsJoinLookupAndJoin for 6 


assertCorrectness JoinLookupSatisfiesJoinPrecondition[succ : Node -> lone Node,
                                                            succ2: Node -> lone Node,
                                                            prdc: Node -> lone Node,
                                                            bs: Node -> lone Node,
                                                            n: Node,
							    lookUp: Node
                                                           ]{
   pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc] and no lookUp}
   program{
      call JoinLookupEvent[succ,succ2,prdc,n];
      lookUp:=n.newSucc
   }
   post{no b: Network.base | Between[n',b,lookUp']}
}

--check JoinLookupSatisfiesJoinPrecondition for 6 lurs


program IsEffectiveSFOS1 [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node, newSucc: Node]{
   [Valid[succ, succ2, prdc, bs]]?;
   [EffectiveSFOSenabled[n, succ, succ2]]?;
   [Member[n.succ, succ]]?;
   call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n]
}

--run IsEffectiveSFOS1 for 6

program IsEffectiveSFOS2 [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node, newSucc: Node]{
   [Valid[succ, succ2, prdc, bs]]?;
   [EffectiveSFOSenabled[n, succ, succ2]]?;
   [!Member[n.succ, succ]]?;
   call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n]
}

--run IsEffectiveSFOS2 for 6 

program IsEffectiveSFNS [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node, newSucc: Node]{
   [Valid[succ, succ2, prdc, bs]]?;
   [EffectiveSFNSenabled[n, succ, succ2, prdc]]?;
   call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n];
   StabilizeFromNewSuccessorEvent[succ,succ2,prdc,n]
}

--run IsEffectiveSFNS for 6

program IsEffectiveRectify [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, n: Node, bs: Node -> lone Node, newPrdc: Node]{
   [Valid[succ, succ2, prdc, bs]]?;
   [EffectiveRectifyEnabled[n,newPrdc,succ,succ2,prdc]]?;
   RectifyEvent[succ, succ2, prdc,n,newPrdc]
}

--run IsEffectiveRectify for 6


/* ========================================================================
SAFETY: PRESERVATION OF THE INDUCTIVE INVARIANT
   The network must be initialized in a state that satisfies Valid.
======================================================================== */

assertCorrectness FailPreservesValidity[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node]{
   pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc]}
   program{
      Fail[succ, succ2, prdc, n];
      bestSucc[succ,succ2,bs]
   }
   post{Valid[succ', succ2', prdc', bs']}
}

--check FailPreservesValidity for 6 


assertCorrectness JoinPreservesValidity[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs : Node -> lone Node, n: Node, c: Node]{
   pre{Valid[succ,succ2,prdc,bs] and memberOrNon[succ, succ2, prdc]}
   program{
      JoinEvent[succ, succ2, prdc, n];
      bestSucc[succ,succ2,bs]
   }
   post{Valid[succ', succ2', prdc', bs']}
}

--check JoinPreservesValidity for 6

assertCorrectness SFOSPreservesValidity[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node]{
   pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc]}
   program{
      call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n];
      bestSucc[succ,succ2,bs]
   }
   post{Valid[succ', succ2', prdc', bs']}
}

--check SFOSPreservesValidity for 6

assertCorrectness SFNSPreservesValidity[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node]{
   pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc]}
   program{
      StabilizeFromNewSuccessorEvent[succ, succ2, prdc, n];
      bestSucc[succ,succ2,bs]
   }
   post{Valid[succ',succ2',prdc',bs']}
}

--check SFNSPreservesValidity for 6

assertCorrectness RectifyPreservesValidity[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node, newPrdc: Node]{
   pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc]}
   program{
      newPrdc := n.succ;
      RectifyEvent[succ, succ2, prdc, newPrdc, n];
      bestSucc[succ,succ2,bs]
   }
   post{Valid[succ', succ2', prdc', bs']}
}

--check RectifyPreservesValidity for 6


/* ========================================================================
======================================================================== */


pred EffectiveSFOSenabled [n: Node, succ: Node -> lone Node, succ2: Node -> lone Node] { 
      Member[n,succ] 
      (  (  Member[n.succ,succ]
         && n.succ2 != (n.succ).succ
         )
      || ! Member[n.succ,succ]
      )
}

assertCorrectness EffectiveSFOScorrectness[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node,  
bs: Node -> lone Node, n: Node]{
pre{Valid[succ,succ2,prdc,bs] 
   and memberOrNon[succ,succ2,prdc] 
   and EffectiveSFOSenabled[n, succ, succ2]
}
program{
   call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n]
}
post{n.succ' != n.succ || n.succ2' != n.succ2}
}

--check EffectiveSFOScorrectness for 6


pred EffectiveSFNSenabled [n: Node, succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node] { 
      let nSucc = ((n.succ).prdc) | {
         Member[n,succ]
         some n.newSucc
	 nSucc = n.newSucc
         Member[n.newSucc,succ]
         Between[n,n.newSucc,n.succ]
      }
}


assertCorrectness EffectiveSFNScorrectness[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node, n: Node, newSucc: Node]{
pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ, succ2, prdc] }
program{
   [EffectiveSFNSenabled[n,succ,succ2,prdc]]?;
   StabilizeFromNewSuccessorEvent[succ, succ2, prdc, n]
}
post{n.succ' != n.succ}
}

--check EffectiveSFNScorrectness for 6

pred EffectiveRectifyEnabled [n, newPrdc: Node, succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node] { 
      Member[n,succ] 
      Member[newPrdc,succ] 
      n = newPrdc.succ
      (no n.prdc || NonMember[n.prdc,succ,succ2,prdc] || Between[n.prdc,newPrdc,n])
} 


assertCorrectness EffectiveRectifyCorrectness[n,newPrdc: Node, succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node]{
pre{Valid[succ, succ2, prdc, bs] and memberOrNon[succ,succ2,prdc]}
program{
   [EffectiveRectifyEnabled[n,newPrdc,succ, succ2, prdc]]?;
   RectifyEvent[succ, succ2, prdc, n, newPrdc]
}
post{n.prdc' != n.prdc}
}

--check EffectiveRectifyCorrectness for 6



/* ========================================================================
SAFETY: IMPROVABILITY AND STABILITY
   When a network is Valid but not Ideal, some effective maintenance
operation is enabled, so the state can change.
   When a network is Ideal, no effective maintenance operation is enabled, 
so repair operations will check the state but not alter it.
======================================================================== */


pred NetworkIsImprovable [succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node] {
      (  some n: Node | EffectiveSFOSenabled [n, succ, succ2]  )
   || (  some n: Node | EffectiveSFNSenabled [n, succ, succ2, prdc]  )
   || (  some n, newPrdc: Node | EffectiveRectifyEnabled [n, newPrdc, succ, succ2, prdc]  )
}

assert ValidNetworkIsImprovable {
  all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |
  (Valid[succ, succ2, prdc, bs] && ! Ideal[succ, succ2, prdc, bs]  and (all m: Node | Member[m, succ] || NonMember[m, succ, succ2, prdc]) )
      => NetworkIsImprovable[succ, succ2, prdc]  
}

--check ValidNetworkIsImprovable for 6

assert IdealNetworkIsNotImprovable {
   all succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node, bs: Node -> lone Node |   
   (Valid[succ, succ2, prdc, bs] && Ideal[succ, succ2, prdc, bs] and (all m: Node | Member[m, succ] || NonMember[m, succ, succ2, prdc]))
   => ! NetworkIsImprovable[succ, succ2, prdc]  }

--check IdealNetworkIsNotImprovable for 6 


/**
Main program
*/

pred Init[succ: Node -> lone Node, succ2: Node -> lone Node, prdc: Node -> lone Node]{
   succ = N1 -> N2 + N2 -> N4 + N4 -> N1
   succ2 = N1 -> N4 + N2 -> N1 + N4 -> N2
   no prdc
   Network.base = N1 + N2 + N4
   all n: Node | no n.newSucc and n.pc=Ready
}

program runNode[succ: Node -> lone Node, succ2: Node -> lone Node, 
prdc: Node -> lone Node, n: Node] var[succNode: Node]{
	([n.pc = Ready]?;
	call JoinLookupEvent[succ, succ2, prdc, n]; n.pc := Joining) +
	
	([n.pc = Joining]?;
	JoinEvent[succ, succ2, prdc, n]; n.pc := Ready) +
	
	([n.pc = Ready]?; Fail[succ, succ2, prdc, n]) +

	([n.pc = Ready]?; StabilizeFromNewSuccessorEvent[succ, succ2, prdc, n]; call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n] ; n.pc := Rectifying) +
        ([n.pc = Rectifying]?; succNode := n.succ ; RectifyEvent[succ, succ2, prdc, succNode, n]; n.pc := Ready) +
	
	([n.pc = Ready]?; call StabilizeFromOldSuccessorEvent[succ, succ2, prdc, n])
}

act choose [n : Node]{
	pre{some n}
	post{n' in Node}
}

program main[succ: Node -> lone Node, succ2: Node -> lone Node, 
prdc: Node -> lone Node] var[n: Node]{
	(choose[n]; call runNode[succ, succ2, prdc, n])*
}

run main

assertCorrectness validIsInvariant[succ: Node -> lone Node, succ2: Node -> lone Node, 
	prdc: Node -> lone Node, bs: Node -> lone Node] {
	pre{Init[succ,succ2,prdc]}
	program{
		(call main[succ, succ2, prdc]);
		bestSucc[succ, succ2, bs]
	}
	post{Valid[succ', succ2', prdc', bs']}
}

check validIsInvariant for 6 lurs exactly 10
check validIsInvariant for 6 lurs exactly 20
check validIsInvariant for 6 lurs exactly 30
check validIsInvariant for 6 lurs exactly 40
check validIsInvariant for 6 lurs exactly 50
